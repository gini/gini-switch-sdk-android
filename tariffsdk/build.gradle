apply plugin: 'com.android.library'

def versionMajor = 0
def versionMinor = 0
def versionPatch = 0
def versionBuild = project.hasProperty('buildNumber') ? buildNumber.toInteger() : 1

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "USER_API_URL", "\"clientapi.gini.net\""
        buildConfigField "String", "TARIFF_API_URL", "\"tariffapi.gini.net\""

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"

    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"

    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.okhttpVersion"
    testCompile 'org.json:json:20140107'
    testCompile 'net.jodah:concurrentunit:0.4.2'
    testCompile "org.mockito:mockito-core:2.7.19"
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

task generateJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile
    failOnError false
}
